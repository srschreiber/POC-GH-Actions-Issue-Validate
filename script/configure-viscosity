#!/bin/bash

# This script actually configures Viscosity (assuming a standard setup on GitHub
# Mac OS). Requires that `script/get-certificate` has been run to generate a certificate
# and pull the authorized profiles.

set -e
set -o pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

if [ ! -f "$DIR/pkcs.p12" ]; then
  # If there are valid certificates in the configured directories, then don't complain.
  # We'll just re-use those.
  if "$DIR/script/check-certificate-validity" 1 >/dev/null 2>&1; then
    :
  else
    echo "ERROR: Missing or expired VPN certificate."
    echo "Please run 'make certificate' to obtain your VPN certificate before attempting to configure Viscosity."
    exit 255
  fi
fi

if [ ! -f "$DIR/.profiles" ]; then
  echo "ERROR: Missing VPN profiles."
  echo "Please run 'make certificate' to obtain your VPN profiles before attempting to configure Viscosity."
  exit 255
fi

#
# If viscosity is not installed here, we really don't know what to do. Dump a copy of the
# pkcs12 certificate into the user's checkout of `github/vpn` and then call it a day.
#

if [ ! -d "/Applications/Viscosity.app" ]; then
  echo ""
  echo "Viscosity does not seem to be installed on this system, or this system is something"
  echo "other than the standard company issue developer Mac."
  exit 1
fi

#
# Import each authorized connection
#

TRASHDIR=$(mktemp -d /tmp/get-certificate.XXXXXXXXXXXXX)
cleanup() {
  rm -rf "$TRASHDIR"
}
trap cleanup EXIT

cat "${DIR}/.profiles" | tr "," "\n" | while read -r profile; do
  echo ""

  if [ ! -d "$DIR/$profile.visc" ]; then
    echo "Warning: You are authorized for profile ${profile} but no template configuration exists." 1>&2
    echo "Installation of ${profile} is being skipped. Please report this to #security-ops-eng." 1>&2
    continue
  fi

  echo "set vpn_checkout_dir to \"$DIR\"" > "$TRASHDIR/check-vpn.applescript.tmp"
	cat "$DIR/script/check-vpn.applescript" >> "$TRASHDIR/check-vpn.applescript.tmp"
  cp "$TRASHDIR/check-vpn.applescript.tmp" "$DIR/$profile.visc/"
	osacompile -o "$DIR/$profile.visc/check-vpn.app" "$TRASHDIR/check-vpn.applescript.tmp"

  #
  # First import the .visc file if a config of the same name doesn't already exist
  #
  if grep -q -R -m1 -e "name $profile" "$HOME/Library/Application Support/Viscosity/OpenVPN/"; then
    :
  else
    echo "Importing new connection profile for $profile..."
    cd "$DIR"
    open "$profile.visc"
    sleep 1 # required to give viscosity a chance to actually write the imported config
  fi

  #
  # Then copy the files into the Application Support folder that makeup the config again.
  # This needs to be run for configs that were just imported because of a bug in Viscosity
  # that sometimes prevents scripts from being imported when opening a .visc file.
  #
  if grep -q -m1 -e "name $profile\$" "$HOME/Library/Application Support/Viscosity/OpenVPN/"*/config.conf 2>/dev/null ; then
    target=$(grep -l -m1 -e "name $profile\$" "$HOME/Library/Application Support/Viscosity/OpenVPN/"*/config.conf)
    target_dir=$(dirname "$target")

    echo "Updating connection profile for $profile..."
    cp -f "$DIR/$profile.visc/config.conf" "$target_dir/config.conf"
    if [ -f "$DIR/pkcs.p12" ]; then
	    cp -f "$DIR/pkcs.p12" "$target_dir/pkcs.p12"
    fi
		rm -rf "$target_dir/check-vpn.app"
		cp -r "$DIR/$profile.visc/check-vpn.app" "$target_dir/check-vpn.app"
  fi
done

echo ""
echo "Restarting viscosity..."
osascript -e "tell application \"Viscosity\" to quit" || true
sleep 1
if pgrep -u $UID Viscosity >/dev/null; then
  pkill -u $UID Viscosity
fi
sleep 1
open /Applications/Viscosity.app
