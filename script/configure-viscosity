#!/bin/bash

# This script actually configures Viscosity (assuming a standard setup on GitHub
# Mac OS). Requires that `script/get-certificate` has been run to generate a certificate
# and pull the authorized profiles.

set -e
set -o pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

if [ ! -f "$DIR/pkcs.p12" ]; then
  # If there are valid certificates in the configured directories, then don't complain.
  # We'll just re-use those.
  if "$DIR/script/check-certificate-validity" 1 >/dev/null 2>&1; then
    :
  else
    echo "ERROR: Missing or expired VPN certificate."
    echo "Please run 'make certificate' to obtain your VPN certificate before attempting to configure Viscosity."
    exit 255
  fi
fi

if [ ! -f "$DIR/.profiles" ]; then
  echo "ERROR: Missing VPN profiles."
  echo "Please run 'make certificate' to obtain your VPN profiles before attempting to configure Viscosity."
  exit 255
fi

#
# If viscosity is not installed here, we really don't know what to do. Dump a copy of the
# pkcs12 certificate into the user's checkout of `github/vpn` and then call it a day.
#

if [ ! -d "/Applications/Viscosity.app" ]; then
  echo ""
  echo "Viscosity does not seem to be installed on this system, or this system is something"
  echo "other than the standard company issue developer Mac."
  exit 1
fi

#
# Stop viscosity - it needs to be shut down when updating existing connections.
#

stop_viscosity() {
  echo "Stopping viscosity..."
  osascript -e "tell application \"Viscosity\" to quit" || true
  sleep 1
  if pgrep -u $UID Viscosity >/dev/null; then
    pkill -u $UID Viscosity
  fi
  sleep 1
}

stop_viscosity

#
# Import each authorized connection
#

TRASHDIR=$(mktemp -d /tmp/get-certificate.XXXXXXXXXXXXX)
cleanup() {
  rm -rf "$TRASHDIR"
}
trap cleanup EXIT

# Keep track of each profile that we are managing, so that the certificate
# checker does not throw false alarms on profiles we are not managing.
true > "$DIR/.managed-profiles"

# Pass 1:
# - If a profile is missing, warn and skip
# - Compile the applescript
# - Determine if there is an existing viscosity profile

import_profiles=""
update_profiles=""
all_profiles=$(cat "${DIR}/.profiles" | tr "," "\n")
for profile in $all_profiles; do
  echo ""
  echo "Pre-processing ${profile}"
  if [ ! -d "$DIR/$profile.visc" ]; then
    echo "Warning: You are authorized for profile ${profile} but no template configuration exists." 1>&2
    echo "Installation of ${profile} is being skipped. Please report this to #security-ops-eng." 1>&2
    continue
  fi

  echo "set vpn_checkout_dir to \"$DIR\"" > "$TRASHDIR/check-vpn.applescript.tmp"
  cat "$DIR/script/check-vpn.applescript" >> "$TRASHDIR/check-vpn.applescript.tmp"
  cp "$TRASHDIR/check-vpn.applescript.tmp" "$DIR/$profile.visc/"
  osacompile -o "$DIR/$profile.visc/check-vpn.app" "$TRASHDIR/check-vpn.applescript.tmp"

  # Determine if there's an existing profile.
  if grep -q -R -m1 -e "name $profile" "$HOME/Library/Application Support/Viscosity/OpenVPN/"; then
    update_profiles="${update_profiles} ${profile}"
  else
    import_profiles="${import_profiles} ${profile}"
  fi
done

# Pass 2: Update any existing profiles. This has to happen with viscosity closed or the
# updates won't register correctly.
update_profile() {
  local profile="$1"

  if grep -q -m1 -e "name $profile\$" "$HOME/Library/Application Support/Viscosity/OpenVPN/"*/config.conf 2>/dev/null ; then
    target=$(grep -l -m1 -e "name $profile\$" "$HOME/Library/Application Support/Viscosity/OpenVPN/"*/config.conf)
    target_dir=$(dirname "$target")
    echo "$target_dir" >> "${DIR}/.managed-profiles"

    echo ""
    echo "Updating connection profile for $profile..."
    cp -f "$DIR/$profile.visc/config.conf" "$target_dir/config.conf"
    if [ -f "$DIR/pkcs.p12" ]; then
      cp -f "$DIR/pkcs.p12" "$target_dir/pkcs.p12"
    fi
    rm -rf "$target_dir/check-vpn.app"
    cp -r "$DIR/$profile.visc/check-vpn.app" "$target_dir/check-vpn.app"
  fi
}

for profile in $update_profiles; do
  update_profile "$profile"
done

# Pass 3: Import any new profiles. This actually opens Viscosity to run through the import
# process.
if [ -n "$import_profiles" ]; then
  echo ""
  echo "*** You may be prompted to keep scripts or remove scripts. ***"
  echo "*** Choose \"Keep Scripts\" at all dialogs. ***"

  for profile in $import_profiles; do
    echo ""
    echo "Importing new connection profile for $profile..."
    cd "$DIR"
    open "$profile.visc"
    sleep 1 # required to give viscosity a chance to actually write the imported config
  done

  echo ""
  echo "Viscosity must be restarted to complete the configuration. Once you have"
  echo "clicked 'Keep Scripts' and dismissed all dialogs, hit Enter, and I will"
  echo "finish configuring Viscosity for you."
  echo ""
  echo "Hit Enter when ready..."
  read -r

  stop_viscosity
  for profile in $import_profiles; do
    update_profile "$profile"
  done
fi

echo ""
echo "Congratulations, your connections have been imported/updated."
echo ""
echo "Starting Viscosity..."
echo ""
open /Applications/Viscosity.app
